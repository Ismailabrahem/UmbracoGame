@using System.Globalization
@using Umbraco.Cms.Web.Common
 @using Umbraco.Cms.Web.Common.PublishedModels;
@using UmbracoGame.Models;
@using UmbracoGame.Models.ViewModels;
@inject UmbracoHelper umbracoHelper
@inherits UmbracoViewPage<GamePageViewModel>

@{
    Layout = "root.cshtml";
}

<style>
    body::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url('@(string.IsNullOrEmpty(Model.Game.BackgroundImage) ? "https://localhost:44322/media/erek3if5/default-game-poster.jpg" : Model.Game.BackgroundImage)') no-repeat center center fixed;
        background-size: cover;
        opacity: 0.1;
        z-index: -1;
    }

    /* Light Mode */
    body:not(.dark-mode)::before {
        opacity: 0.3;
    }
</style>

<main>
    <link rel="stylesheet" href="/css/gamepage.css">
    <meta name="viewport">
    <div class="game-header" style="background-image: url('@(string.IsNullOrEmpty(Model.Game.BackgroundImage) ? "https://localhost:44322/media/erek3if5/default-game-poster.webp" : Model.Game.BackgroundImage)');">
    <div class="game-header-overlay"></div>
        <div class="game-header-content">
            @if (!string.IsNullOrEmpty(Model.Game.Website))
            {
                <h1 class="game-title"><a href="@Model.Game.Website" target="_blank">@Model.Game.Name</a></h1>
            }
            else
            {
                <h1 class="game-title">@Model.Game.Name</h1>
            }
            <p class="game-meta">
            @if (Model.Game.Released != null)
            {
                <span>@Model.Game.Released</span>
            }
            @if (Model.Game.Metacritic != null)
            {
                <span class="game-rating"> | <i class="fas fa-star"></i> @Model.Game.Metacritic</span>
            }
            @if (Model.Game.Playtime != null && Model.Game.Playtime > 0)
            {
                    <span> | @umbracoHelper.GetDictionaryValue("Playtime", @CultureInfo.CurrentCulture): @Model.Game.Playtime hours</span>
            }
            @if (Model.Game.Rating != null && Model.Game.Rating > 0)
            {
                    <span> | @umbracoHelper.GetDictionaryValue("Rating", @CultureInfo.CurrentCulture): @Model.Game.Rating</span>
            }
            </p>
        </div>

        <form id="addGameForm">
        <input type="hidden" name="Id" value="@Model.Game.Id" />
        <input type="hidden" name="Name" value="@Model.Game.Name" />
        <input type="hidden" name="Slug" value="@Model.Game.Slug" />
        <input type="hidden" name="Metacritic" value="@Model.Game.Metacritic" />
        <input type="hidden" name="Released" value="@Model.Game.Released" />
        <input type="hidden" name="Rating" value="@Model.Game.Rating" />
        <input type="hidden" name="Playtime" value="@Model.Game.Playtime" />
        <button id="add-game" type="submit" class="btn btn-primary">@umbracoHelper.GetDictionaryValue("AddGameButton", @CultureInfo.CurrentCulture)</button>
        </form>
    </div>

    <div class="container">
    <div class="row">
        
        <!-- Details Section -->
        <div class="col-md-4 order-2 order-md-1">
            <div class="game-details">
                    <h2>@umbracoHelper.GetDictionaryValue("Aboutgame", @CultureInfo.CurrentCulture)</h2>
                    <p class="game-description">
                        @(string.IsNullOrWhiteSpace(Model.Game.Description)
                            ? @umbracoHelper.GetDictionaryValue("Nodescription", @CultureInfo.CurrentCulture)
                            : Model.Game.Description)
                    </p>
            </div>
        </div>

        <!-- Info Section -->
        <div class="col-md-4 offset-md-1 order-1 order-md-2">
            <div class="game-info text-center">
                    <div class="row">
                    <div class="col-md-6">
                    <h3>@umbracoHelper.GetDictionaryValue("Platforms", @CultureInfo.CurrentCulture)</h3>
                        <p class="game-platforms">
                            @(Model.Game.Platforms?.Any() == true
                            ? string.Join(", ", Model.Game.Platforms.Select(p => p.PlatformDetails?.Name ?? @umbracoHelper.GetDictionaryValue("Unknown", @CultureInfo.CurrentCulture)))
                            : @umbracoHelper.GetDictionaryValue("Noplatforms", @CultureInfo.CurrentCulture))
                        </p>
                    </div>
                    <div class="col-md-6">
                    <h3>@umbracoHelper.GetDictionaryValue("Genres", @CultureInfo.CurrentCulture)</h3>
                        <p class="game-genres">
                            @(Model.Game.Genres?.Any() == true
                        ? string.Join(", ", Model.Game.Genres.Select(g => g.Name))
                            : @umbracoHelper.GetDictionaryValue("Nogenres", @CultureInfo.CurrentCulture))
                        </p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                    <h3>@umbracoHelper.GetDictionaryValue("Developers", @CultureInfo.CurrentCulture)</h3>
                        <p class="game-developers">
                            @(Model.Game.Developers?.Any() == true
                        ? string.Join(", ", Model.Game.Developers.Select(d => d.Name))
                            : @umbracoHelper.GetDictionaryValue("Nodevelopers", @CultureInfo.CurrentCulture))
                        </p>
                    </div>
                    <div class="col-md-6">
                    <h3>@umbracoHelper.GetDictionaryValue("Publishers", @CultureInfo.CurrentCulture)</h3>
                        <p class="game-publishers">
                            @(Model.Game.Publishers?.Any() == true
                        ? string.Join(", ", Model.Game.Publishers.Select(p => p.Name))
                            : @umbracoHelper.GetDictionaryValue("Nopublishers", @CultureInfo.CurrentCulture))
                        </p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 text-center">
                    <h3>@umbracoHelper.GetDictionaryValue("Stores", @CultureInfo.CurrentCulture)</h3>
                <ul class="game-stores">
                    @if (Model.Game.Stores?.Any() == true)
                    {
                        @foreach (var store in Model.Game.Stores)
                        {
                            <li>@store.StoreDetails?.Name</li>
                        }
                    }
                    else
                    {
                            <li>@umbracoHelper.GetDictionaryValue("Nostores", @CultureInfo.CurrentCulture)</li>
                    }
                </ul>
                    </div>
                </div>
            </div>
        </div>

        <!-- Media Section -->
            <div class="col-md-3 order-3">
                <div class="game-media">
                    <h3>@umbracoHelper.GetDictionaryValue("Trailersimages", @CultureInfo.CurrentCulture)</h3>
                    @if (Model.Game.Movies?.Any() == true)
                    {
                        foreach (var movie in Model.Game.Movies.Take(1))
                        {
                            var videoUrl = movie.Data?.HighQuality ?? movie.Preview;

                            if (!string.IsNullOrEmpty(videoUrl))
                            {
                                if (videoUrl.Contains("youtube.com"))
                                {
                                    <!-- Embed YouTube video -->
                                    <iframe width="560" height="315" src="https://www.youtube.com/embed/@videoUrl.Split('=')[1]?autoplay=1&loop=1&playlist=@videoUrl.Split('=')[1]" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
                                }
                                else
                                {
                                    <!-- Use standard video tag -->
                                    <video width="560" height="315" controls class="w-200" autoplay loop>
                                        <source src="@videoUrl" type="video/mp4" />
                                        @umbracoHelper.GetDictionaryValue("Zvideotag", @CultureInfo.CurrentCulture)
                                    </video>
                                }
                            }
                            else
                            {
                                <p>@umbracoHelper.GetDictionaryValue("Zurlgame", @CultureInfo.CurrentCulture)</p>
                            }
                        }
                    }
                    else
                    {
                        <p>@umbracoHelper.GetDictionaryValue("Ztrailersgame", @CultureInfo.CurrentCulture)</p>
                    }
                    <div class="game-screenshots">
                        @if (Model.Game.Screenshots?.Any() == true)
                        {
                            var screenshotsToShow = Model.Game.Screenshots.Take(4).ToList(); // Take up to 4 screenshots

                            foreach (var screenshot in screenshotsToShow)
                            {
                                <div style="position: relative;">
                                    <img src="@screenshot.Image" alt="Screenshot" class="img-fluid" onclick="openImageModal('@screenshot.Image')" />

                                    <!-- Show "View All" only if there are 4 or more screenshots -->
                                    @if (screenshotsToShow.Count == 4 && Model.Game.Screenshots.Count > 4 && screenshot == screenshotsToShow.Last())
                                    {
                                        <div class="view-all-button" onclick="openModal()">@umbracoHelper.GetDictionaryValue("Viewall", @CultureInfo.CurrentCulture)</div>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <p>@umbracoHelper.GetDictionaryValue("Znoscreenshot", @CultureInfo.CurrentCulture)</p>
                        }
                    </div>

                </div>
                <div class="review-buttons">
                    <button onclick="openPopup()" class="open-btn">Write a Review</button>
                </div>
                <div class="review-buttons">
                    <button onclick="openReviewsPopup()" class="open-btn">Load Reviews</button>
                </div>

                <!-- Popup Container -->
                <div id="reviewPopup" class="popup">
                    <div class="popup-content">
                        <span class="close" onclick="closePopup()">&times;</span>
                        <h2 class="popup-title">Leave a Review</h2>

                        <!-- Updated Form -->
                        <form id="reviewForm">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="GameId" value="@Model.Game.Id" />

                            <div class="form-group">
                                <label class="label-name" for="Name">Your Name</label>
                                <input type="text" name="Name" class="form-control" required />
                            </div>

                            <div class="form-group">
                                <label for="Comment">Your Review</label>
                                <textarea name="Comment" class="form-control" required></textarea>
                            </div>

                            <div class="form-group">
                                <label for="Rating">Rating</label>
                                <select name="Rating" class="form-control" required>
                                    <option value="1">1 - Poor</option>
                                    <option value="2">2 - Fair</option>
                                    <option value="3">3 - Good</option>
                                    <option value="4">4 - Very Good</option>
                                    <option value="5">5 - Excellent</option>
                                </select>
                            </div>

                            <button type="submit" class="submit-btn">Submit Review</button>
                        </form>
                    </div>
                </div>
                <!-- Reviews Popup -->
                <div id="reviewsPopup" class="popup">
                    <div class="popup-content">
                        <span class="close" onclick="closeReviewsPopup()">&times;</span>

                        <h2 class="popup-title">Game Reviews</h2>

                        <!-- Reviews Will Be Displayed Here -->
                        <div id="reviewsContainer">
                            <p>Loading reviews...</p>
                        </div>
                    </div>
                </div>

            </div>
        </div>

    </div>


    <!-- Popup Modal -->
    <div id="mediaModal" class="modal">
        <div class="modal-content p-4">
            <s pan class="close-modal" onclick="closeModal()">&times;</s>
            <div class="media-items">
                @if (Model.Game.Screenshots?.Any() == true)
                {
                    foreach (var screenshot in Model.Game.Screenshots)
                    {
                        <img src="@screenshot.Image" alt="Screenshot" class="img-fluid mb-4" onclick="openImageModal('@screenshot.Image')" />
                    }
                }

                @if (Model.Game.Movies?.Any() == true)
                {
                    foreach (var movie in Model.Game.Movies)
                    {
                        var videoUrl = movie.Data?.HighQuality ?? movie.Preview;

                        if (!string.IsNullOrEmpty(videoUrl))
                        {
                            if (videoUrl.Contains("youtube.com"))
                            {
                                <!-- Embed YouTube video -->
                                <iframe width="600" height="355" src="https://www.youtube.com/embed/@videoUrl.Split('=')[1]" frameborder="0" allowfullscreen class="mb-4"></iframe>
                            }
                            else
                            {
                                <!-- Use standard video tag -->
                                <video controls class="w-100 mb-4">
                                    <source src="@videoUrl" type="video/mp4" />
                                    @umbracoHelper.GetDictionaryValue("Zvideotag", @CultureInfo.CurrentCulture)
                                </video>
                            }
                        }
                        else
                        {
                            <p>@umbracoHelper.GetDictionaryValue("Zurlgame", @CultureInfo.CurrentCulture)</p>
                        }
                    }
                }
            </div>

        </div>


    </div>
    <!-- Image Modal -->
    <div id="imageModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeImageModal()">&times;</span>
            <img id="enlargedImage" src="" alt="Enlarged Screenshot" class="img-fluid" />
        </div>
    </div>

</main>

<script>
    function openReviewsPopup() {
        document.getElementById("reviewsPopup").style.display = "flex";

        var gameId = "@Model.Game.Id"; // Get Game ID from Razor
        console.log("Fetching reviews for GameId:", gameId);

        fetch(`/umbraco/surface/ReviewSurface/GetReviews?gameId=${gameId}`)
            .then(response => response.json())
            .then(data => {
                console.log("Fetched data:", data);
                const reviewsContainer = document.getElementById("reviewsContainer");
                reviewsContainer.innerHTML = "";

                if (!data || data.length === 0) {
                    reviewsContainer.innerHTML = "<p>No reviews yet. Be the first to write one!</p>";
                    return;
                }

                data.forEach(review => {
                    const reviewElement = document.createElement("div");
                    reviewElement.classList.add("review-item", "mb-3", "p-3", "border", "rounded");

                    reviewElement.innerHTML = `
                        <strong>${review.name || "Unknown"}</strong> (${review.rating || "N/A"}/5)
                        <br />
                        <em>${new Date(review.date).toLocaleString()}</em>
                        <p>${review.comment || "No comment"}</p>
                    `;

                    reviewsContainer.appendChild(reviewElement);
                });
            })
            .catch(error => console.error("Error loading reviews:", error));
    }

    function closeReviewsPopup() {
        document.getElementById("reviewsPopup").style.display = "none";
    }

document.addEventListener("DOMContentLoaded", function () {
    document.getElementById("addGameForm").addEventListener("submit", function (event) {
        event.preventDefault(); // Prevent default form submission

        var formData = new FormData(this);

        fetch("@Url.Action("AddGame", "GameSurface")", {
            method: "POST",
            body: formData,
            headers: {
                "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Change button text and disable it
                let addButton = document.getElementById("add-game");
                addButton.innerText = "Added";
                addButton.disabled = true;

                // Show success popup
                let popup = document.getElementById("success-popup");
                popup.style.display = "block";
                popup.style.opacity = "1";

                // Hide popup after 4 seconds
                setTimeout(() => {
                    popup.style.opacity = "0";
                    setTimeout(() => popup.style.display = "none", 500);
                }, 4000);
            } else {
                alert(data.message); // Show error message
            }
        })
        .catch(error => console.error("Error:", error));
    });
});

    function openModal() {
        document.getElementById('mediaModal').style.display = 'block';
    }

    function closeModal() {
        document.getElementById('mediaModal').style.display = 'none';
    }

    function openImageModal(imageUrl) {
        document.getElementById('enlargedImage').src = imageUrl;
        document.getElementById('imageModal').style.display = 'block';
    }

    function closeImageModal() {
        document.getElementById('imageModal').style.display = 'none';
    }

        function openPopup() {
        document.getElementById("reviewPopup").style.display = "flex";
    }

    function closePopup() {
        document.getElementById("reviewPopup").style.display = "none";
    }
</script>
<!-- JavaScript for AJAX Submission -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Handle review form submission
        document.getElementById("reviewForm").addEventListener("submit", function (event) {
            event.preventDefault(); // Prevent default form submission

            // Serialize form data
            const formData = new FormData(this);

            // Send AJAX request
            fetch("@Url.Action("AddReview", "ReviewSurface")", {
                method: "POST",
                body: formData,
                headers: {
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success message
                    alert("Review submitted successfully!");

                    // Optionally, reload the reviews section
                    openReviewsPopup(); // Reload reviews in the popup
                    closePopup(); // Close the review form popup
                } else {
                    // Show error message
                    alert(data.message || "Failed to submit review.");
                }
            })
            .catch(error => {
                console.error("Error:", error);
                alert("An error occurred while submitting the review.");
            });
        });
    });
</script>
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}