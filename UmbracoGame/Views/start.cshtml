@using System.Globalization
@using Umbraco.Cms.Core.Models
@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Cms.Web.Common
@using Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Forms.Web
@using UmbracoGame.Models.ViewModels
@inject UmbracoHelper umbracoHelper
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<StartPageViewModel>

@{

    Layout = "root.cshtml";

    var blockGrid = Model.Value<BlockGridModel>("content");
    var fromSoftwareGames = Model.Value<IEnumerable<IPublishedContent>>("Fromsoftware");
    var fpsGames = Model.Value<IEnumerable<IPublishedContent>>("Fps");
    var topGames = Model.Value<IEnumerable<IPublishedContent>>("Top");
}

<main>
    <link rel="stylesheet" href="/css/start.css">
    @*     STARTPAGE CAROUSEL GAMES *@
    <div id="myCarousel" class="carousel slide mb-6" data-bs-ride="carousel">
        <div class="carousel-indicators">
            @for (var i = 0; i < Model.Slides.Count(); i++)
            {
                <button type="button" data-bs-target="#myCarousel" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-label="Slide @(i + 1)"></button>
            }
        </div>
        <div class="carousel-inner">
            @foreach (var (slide, index) in Model.Slides.Select((s, i) => (s, i)))
            {
                var gamePageLink = slide.Value<Link>("gamePage");
                <div class="carousel-item @(index == 0 ? "active" : "")">
                    <img src="@slide.Image?.Url()" class="carousel-poster" alt="@slide.Headline" />
                    <div class="container">
                        <div class="carousel-caption text-start">
                            <h1>@slide.Headline</h1>
                            <p class="opacity-75">@slide.Placeholder</p>
                            <p>
                                @if (gamePageLink != null && !string.IsNullOrEmpty(gamePageLink.Url)) // Ensure gamePageLink is not null
                                {
                                    <a class="btn btn-lg btn-primary" href="@gamePageLink.Url" target="_blank">
                                        @umbracoHelper.GetDictionaryValue("Explore", @CultureInfo.CurrentCulture)
                                    </a>
                                }
                            </p>
                        </div>
                    </div>
                </div>
            }

        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#myCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#myCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>

@*     STARTPAGE GAMES *@
    <div class="album py-5 bg-body-tertiary">
        <div class="container">
            <h2 class="software-title">@umbracoHelper.GetDictionaryValue("Fromsoftware", @CultureInfo.CurrentCulture)</h2>

            @if (fromSoftwareGames?.Any() == true)
            {
                <div class="game-card-container">
                    @foreach (var game in fromSoftwareGames)
                    {

                        var imageMedia = game.Value<IPublishedContent>("Image"); 
                        var imageUrl = imageMedia?.Url();
                        var gameLink = game.Value<string>("Link") ?? "#";


                        @if (!string.IsNullOrEmpty(imageUrl))
                        {
                            <div class="game-card">
                                <a href="@gameLink" target="_blank" class="game-link">
                                    <img src="@imageUrl" alt="FromSoftware Game" class="game-image">
                                </a>
                            </div>
                        }
                    }
                </div>
            }

            <h2 class="fps-title">@umbracoHelper.GetDictionaryValue("Fpsgames", @CultureInfo.CurrentCulture)</h2>
            @if (fpsGames?.Any() == true)
            {
                <div class="game-card-container">
                    @foreach (var game in fpsGames)
                    {

                        var imageMedia = game.Value<IPublishedContent>("Image");
                        var imageUrl = imageMedia?.Url();
                        var gameLink = game.Value<string>("Link") ?? "#";


                        @if (!string.IsNullOrEmpty(imageUrl))
                        {
                            <div class="game-card">
                                <a href="@gameLink" target="_blank" class="game-link">
                                    <img src="@imageUrl" alt="FromSoftware Game" class="game-image">
                                </a>
                            </div>
                        }
                    }
                </div>
            }

            <h2 class="top-games-title">@umbracoHelper.GetDictionaryValue("Topgames", @CultureInfo.CurrentCulture)</h2>
            @if (topGames?.Any() == true)
            {
                <div class="game-card-container">
                    @foreach (var game in topGames)
                    {

                        var imageMedia = game.Value<IPublishedContent>("Image");
                        var imageUrl = imageMedia?.Url();
                        var gameLink = game.Value<string>("Link") ?? "#";


                        @if (!string.IsNullOrEmpty(imageUrl))
                        {
                            <div class="game-card">
                                <a href="@gameLink" target="_blank" class="game-link">
                                    <img src="@imageUrl" alt="FromSoftware Game" class="game-image">
                                </a>
                            </div>
                        }
                    }
                </div>
            }

        </div>
    </div>


    <!-- Floating Button -->
    <button class="floating-btn" data-bs-toggle="modal" data-bs-target="#newsletterModal">
        📧
    </button>

    <!-- Modal -->
    <div class="modal fade" id="newsletterModal" tabindex="-1" aria-labelledby="newsletterModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <!-- Center modal -->
            <div class="modal-content">
                <!-- Red Close Button -->
                <button type="button" class="btn-close btn-close-red" data-bs-dismiss="modal" aria-label="Close">❌</button>

                <div class="modal-body">
                @await Component.InvokeAsync("RenderForm", new { formId = Model.Content.Form, Theme = "default" })
                </div>
            </div>
        </div>
    </div>

</main>

